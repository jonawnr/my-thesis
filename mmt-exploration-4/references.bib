
@incollection{offutt_mutation_2001,
	location = {Boston, {MA}},
	title = {Mutation 2000: Uniting the Orthogonal},
	isbn = {9781475759396},
	url = {https://doi.org/10.1007/978-1-4757-5939-6_7},
	shorttitle = {Mutation 2000},
	abstract = {Mutation testing is a powerful, but computationally expensive, technique for unit testing software. This expense has prevented mutation from becoming widely used in practical situations, but recent engineering advances have given us techniques and algorithms for significantly reducing the cost of mutation testing. These techniques include a new algorithmic execution technique called schema-based mutation, an approximation technique called weak mutation, a reduction technique called selective mutation, heuristics for detecting equivalent mutants, and algorithms for automatic test data generation. This paper reviews experimentation with these advances and outlines a design for a system that will approximate mutation, but in a way that will be accessible to everyday programmers. We envision a system to which a programmer can submit a program unit and get back a set of input/output pairs that are guaranteed to form an effective test of the unit by being close to mutation adequate. We believe this system could be efficient enough to be adopted by leading-edge software developers. Full automation in unit testing has the potential to dramatically change the economic balance between testing and development, by reducing the cost of testing from the major part of the total development cost to a small fraction.},
	pages = {34--44},
	booktitle = {Mutation Testing for the New Century},
	publisher = {Springer {US}},
	author = {Offutt, A. Jefferson and Untch, Roland H.},
	editor = {Wong, W. Eric},
	urldate = {2025-03-19},
	date = {2001},
	langid = {english},
	doi = {10.1007/978-1-4757-5939-6_7},
}

@inproceedings{just_defects4j_2014,
	location = {San Jose {CA} {USA}},
	title = {Defects4J: a database of existing faults to enable controlled testing studies for Java programs},
	isbn = {9781450326452},
	url = {https://dl.acm.org/doi/10.1145/2610384.2628055},
	doi = {10.1145/2610384.2628055},
	shorttitle = {Defects4J},
	eventtitle = {{ISSTA} '14: International Symposium on Software Testing and Analysis},
	pages = {437--440},
	booktitle = {Proceedings of the 2014 International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Just, René and Jalali, Darioush and Ernst, Michael D.},
	urldate = {2025-03-19},
	date = {2014-07-21},
	langid = {english},
}

@inproceedings{coles_pit_2016,
	location = {Saarbrücken Germany},
	title = {{PIT}: a practical mutation testing tool for Java (demo)},
	isbn = {9781450343909},
	url = {https://dl.acm.org/doi/10.1145/2931037.2948707},
	doi = {10.1145/2931037.2948707},
	shorttitle = {{PIT}},
	eventtitle = {{ISSTA} '16: International Symposium on Software Testing and Analysis},
	pages = {449--452},
	booktitle = {Proceedings of the 25th International Symposium on Software Testing and Analysis},
	publisher = {{ACM}},
	author = {Coles, Henry and Laurent, Thomas and Henard, Christopher and Papadakis, Mike and Ventresque, Anthony},
	urldate = {2025-03-19},
	date = {2016-07-18},
	langid = {english},
}

@article{arendt_tool_2013,
	title = {A tool environment for quality assurance based on the Eclipse Modeling Framework},
	volume = {20},
	issn = {1573-7535},
	url = {https://doi.org/10.1007/s10515-012-0114-7},
	doi = {10.1007/s10515-012-0114-7},
	abstract = {The paradigm of model-based software development has become more and more popular since it promises an increase in the efficiency and quality of software development. Following this paradigm, models become primary artifacts in the software development process. Therefore, software quality and quality assurance frequently leads back to the quality and quality assurance of the involved models. In our approach, we propose a model quality assurance process that can be adapted to project-specific and domain-specific needs. This process is based on static model analysis using model metrics and model smells. Based on the outcome of the model analysis, appropriate model refactoring steps can be performed. In this paper, we present a tool environment conveniently supporting the proposed model quality assurance process. In particular, the presented tools support metrics reporting, smell detection, and refactoring for models being based on the Eclipse Modeling Framework, a widely used open source technology in model-based software development.},
	pages = {141--184},
	number = {2},
	journaltitle = {Automated Software Engineering},
	shortjournal = {Autom Softw Eng},
	author = {Arendt, Thorsten and Taentzer, Gabriele},
	urldate = {2025-02-27},
	date = {2013-06-01},
	langid = {english},
	keywords = {Artificial Intelligence, Eclipse Modeling Framework, Model quality, Model quality assurance, Model-based software development, Modeling},
}

@inproceedings{bockisch_mutation_2024,
	location = {Linz Austria},
	title = {Mutation Testing of Java Bytecode: A Model-Driven Approach},
	isbn = {9798400705045},
	url = {https://dl.acm.org/doi/10.1145/3640310.3674103},
	doi = {10.1145/3640310.3674103},
	shorttitle = {Mutation Testing of Java Bytecode},
	eventtitle = {{MODELS} '24: {ACM}/{IEEE} 27th International Conference on Model Driven Engineering Languages and Systems},
	pages = {237--248},
	booktitle = {Proceedings of the {ACM}/{IEEE} 27th International Conference on Model Driven Engineering Languages and Systems},
	publisher = {{ACM}},
	author = {Bockisch, Christoph and Eren, Deniz and Lehmann, Sascha and Neufeld, Daniel and Taentzer, Gabriele},
	urldate = {2025-02-13},
	date = {2024-09-22},
	langid = {english},
}

@inproceedings{kaufman_prioritizing_2022,
	location = {Pittsburgh Pennsylvania},
	title = {Prioritizing mutants to guide mutation testing},
	isbn = {9781450392211},
	url = {https://dl.acm.org/doi/10.1145/3510003.3510187},
	doi = {10.1145/3510003.3510187},
	eventtitle = {{ICSE} '22: 44th International Conference on Software Engineering},
	pages = {1743--1754},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	publisher = {{ACM}},
	author = {Kaufman, Samuel J. and Featherman, Ryan and Alvin, Justin and Kurtz, Bob and Ammann, Paul and Just, René},
	urldate = {2025-02-13},
	date = {2022-05-21},
	langid = {english},
}

@misc{bockisch_mmt_2024,
	title = {{MMT}: Mutation Testing of Java Bytecode with Model Transformation -- An Illustrative Demonstration},
	url = {http://arxiv.org/abs/2404.14097},
	doi = {10.48550/arXiv.2404.14097},
	shorttitle = {{MMT}},
	abstract = {Mutation testing is an approach to check the robustness of test suites. The program code is slightly changed by mutations to inject errors. A test suite is robust enough if it finds such errors. Tools for mutation testing usually integrate sets of mutation operators such as, for example, swapping arithmetic operators; modern tools typically work with compiled code such as Java bytecode. In this case, the mutations must be defined in such a way that the mutated program still can be loaded and executed. The results of mutation tests depend directly on the possible mutations. More advanced mutations and even domain-specific mutations can pose another challenge to the test suite. Since extending the classical approaches to more complex mutations is not well supported and is difficult, we propose a model-driven approach where mutations of Java bytecode can be flexibly defined by model transformation. The corresponding tool called {MMT} has been extended with advanced mutation operators for modifying object-oriented structures, Java-specific properties and method calls of {APIs}, making it the only mutation testing tool for Java bytecode that supports such mutations.},
	number = {{arXiv}:2404.14097},
	publisher = {{arXiv}},
	author = {Bockisch, Christoph and Taentzer, Gabriele and Neufeld, Daniel},
	urldate = {2025-02-13},
	date = {2024-04-22},
	eprinttype = {arxiv},
	eprint = {2404.14097},
	keywords = {Computer Science - Software Engineering},
}

@article{JiaHarman2000,
	title = {An Analysis and Survey of the Development of Mutation Testing},
	volume = {37},
	issn = {0098-5589},
	url = {https://doi.org/10.1109/TSE.2010.62},
	doi = {10.1109/TSE.2010.62},
	abstract = {Mutation testing is a fault-based software testing technique that has been studied widely for over three decades. To date, a comprehensive analysis and survey of the state of the art of mutation testing has been missing. This paper provides such a comprehensive analysis and survey. It also presents results from a new mutation testing tool developed by the authors and shows how some of the problems inherent in mutation testing can be mitigated using this tool, making the technique more viable for widespread application.},
	pages = {649--678},
	number = {5},
	journaltitle = {IEEE Transactions on Software Engineering},
	shortjournal = {IEEE Trans. Softw. Eng.},
	author = {Jia, Yue and Harman, Mark},
	date = {2011-09},
	keywords = {Fault-based testing, mutation testing, software testing},
}

@inproceedings{Schuler2009,
	location = {Denver Colorado {USA}},
	title = {A dynamic analysis approach to uncovering the key features of effective mutants},
	isbn = {9781605585949},
	url = {https://dl.acm.org/doi/10.1145/1572272.1572284},
	doi = {10.1145/1572272.1572284},
	eventtitle = {{ISSTA} '09: International Symposium on Software Testing and Analysis},
	pages = {83--94},
	booktitle = {Proceedings of the eighteenth international symposium on Software testing and analysis},
	publisher = {{ACM}},
	author = {Schuler, David and Zeller, Andreas},
	urldate = {2025-01-15},
	date = {2009-07-19},
	langid = {english},
}
